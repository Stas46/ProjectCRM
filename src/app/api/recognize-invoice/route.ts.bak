import { NextRequest, NextResponse } from 'next/server';
import { GoogleAuth } from 'google-auth-library';
import { ImageAnnotatorClient } from '@google-cloud/vision';
import { enhanceImageForOCR, binarizeImage, enhanceInvoiceImage, enhanceTableImage } from     }
  } catch (error: any) {
    console.error('Глобальная ошибка в API распознавания счетов:', error);
    return NextResponse.json(
      { 
        error: 'Внутренняя ошибка сервера', 
        details: error.message || 'Неизвестная ошибка',
        suggestions: [
          'Попробуйте повторить запрос позже',
          'Убедитесь, что файл не поврежден',
          'Попробуйте файл меньшего размера или другого формата'
        ]
      },
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

/**
 * Извлекает структурированные данные из распознанного текста счета
 * @param fullText Полный текст документа
 * @param textElements Отдельные элементы текста с координатами
 * @returns Объект с данными счета
 */
function extractInvoiceData(
  fullText: string, 
  textElements: Array<{text: string, confidence: number, boundingBox: any[]}>
) {
  // Инициализация объекта с данными счета
  const data: {
    invoiceNumber?: string;
    invoiceDate?: string;
    dueDate?: string;
    totalAmount?: string;
    totalAmountWithVAT?: string;
    vatAmount?: string;
    supplier?: {
      name?: string;
      inn?: string;
      kpp?: string;
      address?: string;
    };
    customer?: {
      name?: string;
      inn?: string;
      address?: string;
    };
    paymentInfo?: {
      bankName?: string;
      bankAccount?: string;
      correspondentAccount?: string;
      bic?: string;
    };
    items?: Array<{
      name?: string;
      quantity?: string;
      unit?: string;
      price?: string;
      amount?: string;
    }>;
  } = {
    supplier: {},
    customer: {},
    paymentInfo: {},
    items: []
  };
  
  // Поиск номера счета
  const invoiceNumberRegex = /(?:счет|счёт|счета|invoice|№|номер)[^0-9]*([0-9\/-]+)/i;
  const invoiceNumberMatch = fullText.match(invoiceNumberRegex);
  if (invoiceNumberMatch && invoiceNumberMatch[1]) {
    data.invoiceNumber = invoiceNumberMatch[1].trim();
  }
  
  // Поиск даты счета
  const dateRegex = /(?:от|date)[^0-9]*(\d{1,2}[.,-\/]\d{1,2}[.,-\/]\d{2,4}|\d{1,2}\s+[а-яА-Яa-zA-Z]+\s+\d{4})/i;
  const dateMatch = fullText.match(dateRegex);
  if (dateMatch && dateMatch[1]) {
    data.invoiceDate = dateMatch[1].trim();
  }
  
  // Поиск суммы
  const totalAmountRegex = /(?:итого|всего|total|сумма|sum)[^0-9]*(\d[\d\s,.]*\d)/i;
  const totalAmountMatch = fullText.match(totalAmountRegex);
  if (totalAmountMatch && totalAmountMatch[1]) {
    data.totalAmount = totalAmountMatch[1].trim().replace(/\s/g, '');
  }
  
  // Поиск НДС
  const vatRegex = /(?:ндс|vat)[^0-9]*(\d[\d\s,.]*\d)/i;
  const vatMatch = fullText.match(vatRegex);
  if (vatMatch && vatMatch[1]) {
    data.vatAmount = vatMatch[1].trim().replace(/\s/g, '');
  }
  
  // Поиск ИНН поставщика
  const supplierInnRegex = /(?:инн|inn)[^0-9]*(\d{10,12})/i;
  const supplierInnMatch = fullText.match(supplierInnRegex);
  if (supplierInnMatch && supplierInnMatch[1]) {
    data.supplier!.inn = supplierInnMatch[1].trim();
  }
  
  // Поиск КПП поставщика
  const supplierKppRegex = /(?:кпп|kpp)[^0-9]*(\d{9})/i;
  const supplierKppMatch = fullText.match(supplierKppRegex);
  if (supplierKppMatch && supplierKppMatch[1]) {
    data.supplier!.kpp = supplierKppMatch[1].trim();
  }
  
  // Поиск наименования поставщика (предположим, что оно рядом с ИНН)
  if (supplierInnMatch) {
    // Ищем текст выше ИНН, который может быть названием компании
    const innPosition = fullText.indexOf(supplierInnMatch[0]);
    const textBeforeInn = fullText.substring(Math.max(0, innPosition - 100), innPosition);
    
    // Часто название компании начинается с ООО, АО, ИП и т.д.
    const companyNameRegex = /(ООО|АО|ПАО|ИП|ЗАО)[\s«"]([^»"\n]+)/i;
    const companyNameMatch = textBeforeInn.match(companyNameRegex);
    if (companyNameMatch) {
      data.supplier!.name = `${companyNameMatch[1]} "${companyNameMatch[2]}"`.trim();
    }
  }
  
  // Получение элементов таблицы, если они есть
  // Это упрощенный подход - реальный парсинг таблиц гораздо сложнее
  const tableRowRegex = /(\d+)[^\d]+(\d+(?:[.,]\d+)?)[^\d]+(\d+(?:[.,]\d+)?)[^\d]+(\d+(?:[.,]\d+)?)/g;
  let match;
  while ((match = tableRowRegex.exec(fullText)) !== null) {
    const item = {
      quantity: match[1].trim(),
      unit: 'шт', // Предполагаем единицу измерения
      price: match[2].trim(),
      amount: match[4].trim()
    };
    
    // Пытаемся найти название товара/услуги
    const startPos = Math.max(0, match.index - 100);
    const endPos = match.index;
    const textBeforeRow = fullText.substring(startPos, endPos);
    const lastLineBreak = textBeforeRow.lastIndexOf('\n');
    if (lastLineBreak !== -1) {
      item.name = textBeforeRow.substring(lastLineBreak + 1).trim();
    }
    
    data.items!.push(item);
  }
  
  return data;
}essing';
import { convertPdfToImage } from '@/lib/pdf-processing';

// Create client for Google Cloud Vision API
let visionClient: ImageAnnotatorClient | null = null;

try {
  // Initialize client with credentials from environment variables
  const auth = new GoogleAuth({
    credentials: {
      client_email: process.env.GOOGLE_CLIENT_EMAIL,
      private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    },
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
  });

  visionClient = new ImageAnnotatorClient({ auth });
} catch (error) {
  console.error('Error initializing Google Vision API client:', error);
}

export async function POST(request: NextRequest) {
  try {
    // Check if client is initialized
    if (!visionClient) {
      console.error('Google Vision API client not initialized');
      return NextResponse.json(
        { error: 'Google Vision API configuration error' },
        { status: 500, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Check request type
    if (!request.headers.get('content-type')?.includes('multipart/form-data')) {
      return NextResponse.json(
        { error: 'Invalid request format. Expected multipart/form-data' },
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Get form from request
    const formData = await request.formData();
    const file = formData.get('file') as File | null;

    if (!file) {
      return NextResponse.json(
        { error: 'File not found in request' },
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Get file extension
    const fileExtension = file.name.split('.').pop()?.toLowerCase();
    
    // Get file data as ArrayBuffer
    const fileBuffer = Buffer.from(await file.arrayBuffer());
    
    // Variable to store image buffer (for PDF or image)
    let imageBuffer: Buffer = fileBuffer; // Default to the original buffer
    
    // Process file based on extension
    if (fileExtension === 'pdf') {
      try {
        // Convert PDF to image
        try {
          const convertedBuffer = await convertPdfToImage(fileBuffer);
          if (convertedBuffer) {
            imageBuffer = convertedBuffer;
          } else {
            throw new Error('Не удалось конвертировать PDF в изображение');
          }
        } catch (conversionError: any) {
          console.error('Ошибка при конвертации PDF в изображение:', conversionError);
          return NextResponse.json(
            { 
              error: 'Ошибка при обработке PDF документа', 
              details: conversionError.message || 'Неизвестная ошибка',
              suggestions: [
                'Попробуйте изображение лучшего качества',
                'Убедитесь, что PDF документ не поврежден',
                'Попробуйте загрузить документ в другом формате (JPG, PNG)'
              ]
            },
            { status: 500, headers: { 'Content-Type': 'application/json' } }
          );
        }
      } catch (pdfError) {
        console.error('Общая ошибка при обработке PDF:', pdfError);
        return NextResponse.json(
          { 
            error: 'Ошибка при обработке PDF документа',
            suggestions: [
              'Попробуйте изображение лучшего качества',
              'Убедитесь, что PDF документ не поврежден',
              'Попробуйте загрузить документ в другом формате (JPG, PNG)'
            ]
          },
          { status: 500, headers: { 'Content-Type': 'application/json' } }
        );
      }
    } else if (!['jpg', 'jpeg', 'png', 'webp', 'tiff'].includes(fileExtension || '')) {
      return NextResponse.json(
        { 
          error: 'Неподдерживаемый формат файла. Поддерживаются только PDF и изображения (JPG, PNG, WEBP, TIFF)',
          suggestions: [
            'Сохраните документ в одном из поддерживаемых форматов',
            'Используйте инструменты конвертации файлов для получения совместимого формата'
          ]
        },
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Enhance image quality for OCR with specific invoice processing
    try {
      // Так как это API для распознавания счетов, используем специальную функцию enhanceInvoiceImage
      let enhancedBuffer = await enhanceImageForOCR(imageBuffer); // Используем автоопределение типа документа
      if (enhancedBuffer) {
        imageBuffer = enhancedBuffer;
        console.log('Изображение улучшено для распознавания');
      }
    } catch (enhanceError) {
      console.error('Ошибка при улучшении изображения:', enhanceError);
      // Продолжаем с оригинальным изображением, если улучшение не удалось
    }

    // Выполняем распознавание текста с помощью Google Cloud Vision API
    try {
      // Для счетов используем document-text-detection, более точный для структурированных документов
      const [result] = await visionClient.documentTextDetection({
        image: { content: imageBuffer },
        imageContext: {
          languageHints: ['ru-RU', 'en-US'], // Указываем языки для повышения точности
        },
      });

      const detections = result.fullTextAnnotation ? 
        [{ description: result.fullTextAnnotation.text }] : (result.textAnnotations || []);
      
      if (detections.length === 0) {
        // Если первичное распознавание не дало результатов, попробуем альтернативный метод обработки
        console.log('Первичное распознавание не дало результатов, пробуем альтернативные методы...');
        try {
          // Применим бинаризацию и повторим распознавание
          const binarizedImage = await binarizeImage(imageBuffer);
          const [secondResult] = await visionClient.textDetection({
            image: { content: binarizedImage },
            imageContext: {
              languageHints: ['ru-RU', 'en-US'],
            },
          });
          
          const secondDetections = secondResult.textAnnotations || [];
          if (secondDetections.length > 0) {
            console.log('Альтернативный метод обработки дал результаты');
            return NextResponse.json(
              { 
                success: true,
                fullText: secondDetections[0].description || '',
                textElements: secondDetections.slice(1).map(item => ({
                  text: item.description || '',
                  confidence: item.confidence || 0,
                  boundingBox: item.boundingPoly?.vertices || [],
                })),
                fileType: fileExtension,
                enhancedImage: true,
                processingMethod: 'alternative'
              },
              { status: 200, headers: { 'Content-Type': 'application/json' } }
            );
          }
        } catch (altError) {
          console.error('Ошибка при альтернативной обработке:', altError);
        }
        
        // Если все методы не дали результатов
        return NextResponse.json(
          { 
            error: 'Текст на изображении не обнаружен',
            suggestions: [
              'Попробуйте изображение с лучшим разрешением',
              'Убедитесь, что текст хорошо виден на изображении',
              'Попробуйте изменить угол или освещение при съемке документа',
              'Если это скан - увеличьте контрастность при сканировании'
            ]
          },
          { status: 404, headers: { 'Content-Type': 'application/json' } }
        );
      }

      // Извлекаем полный текст и структуру документа
      let fullText = '';
      let textElements: Array<{text: string, confidence: number, boundingBox: any[]}> = [];
      
      if (result.fullTextAnnotation) {
        // Если используем documentTextDetection, то извлекаем текст из fullTextAnnotation
        fullText = result.fullTextAnnotation.text || '';
        
        // Извлекаем структурированные блоки текста (страницы, параграфы, блоки, слова)
        const pages = result.fullTextAnnotation.pages || [];
        
        // Собираем структурированные элементы текста для более точного анализа
        textElements = pages.flatMap(page => 
          (page.blocks || []).flatMap(block => 
            (block.paragraphs || []).flatMap(paragraph => 
              (paragraph.words || []).map(word => ({
                text: (word.symbols || []).map(symbol => symbol.text).join(''),
                confidence: word.confidence || 0,
                boundingBox: word.boundingBox?.vertices || [],
              }))
            )
          )
        );
      } else if (detections.length > 0) {
        // Если используем textDetection, обрабатываем как раньше
        fullText = detections[0].description || '';
        
        // Извлекаем отдельные слова и строки
        textElements = detections.slice(1).map(item => ({
          text: item.description || '',
          confidence: item.confidence || 0,
          boundingBox: item.boundingPoly?.vertices || [],
        }));
      }

      // Извлечение структурированных данных счета
      const invoiceData = extractInvoiceData(fullText, textElements);
      
      // Return results in JSON format
      return NextResponse.json(
        { 
          success: true,
          fullText,
          textElements,
          invoiceData,
          // Add additional information for debugging
          fileType: fileExtension,
          enhancedImage: true,
        },
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    } catch (recognitionError: any) {
      console.error('Error recognizing text:', recognitionError);
      return NextResponse.json(
        { 
          error: 'Ошибка при распознавании текста', 
          details: recognitionError.message || 'Неизвестная ошибка',
          suggestions: [
            'Попробуйте изображение лучшего качества',
            'Убедитесь, что текст контрастный и хорошо виден',
            'Если документ содержит перевернутый или повернутый текст, исправьте ориентацию'
          ]
        },
        { status: 500, headers: { 'Content-Type': 'application/json' } }
      );
    }
  } catch (error: any) {
    console.error('Global error in invoice recognition API:', error);
    return NextResponse.json(
      { 
        error: 'Внутренняя ошибка сервера', 
        details: error.message || 'Неизвестная ошибка',
        suggestions: [
          'Попробуйте повторить запрос позже',
          'Убедитесь, что файл не поврежден',
          'Попробуйте файл меньшего размера или другого формата'
        ]
      },
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}